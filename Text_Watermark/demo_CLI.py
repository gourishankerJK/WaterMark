from models.watermark_original import watermark_model
from models.changed_watermark_original import watermark_model as remove_watermark
from options import get_parser_main_model
import warnings

# Ignore warnings
warnings.filterwarnings('ignore')

def watermark_embed_demo(raw):
    watermarked_text = model.embed(raw)
    return watermarked_text

def remove_watermark_embed_demo(raw):
    watermarked_text = model2.embed(raw)
    return watermarked_text

def watermark_extract(raw):
    is_watermark, p_value, n, ones, z_value = model.watermark_detector_fast(raw)
    confidence = (1 - p_value) * 100
    return f"{confidence:.2f}%"

def precise_watermark_detect(raw):
    is_watermark, p_value, n, ones, z_value = model.watermark_detector_precise(raw)
    confidence = (1 - p_value) * 100
    return f"{confidence:.2f}%"

def detect_watermark(data):
    scores = []
    for i in range(len(data)):
        is_watermark, p_value, n, ones, z_value = model.watermark_detector_precise(data[i])
        confidence = (1 - p_value) * 100
        scores.append(confidence)
    return scores

if __name__ == "__main__":
    opts = get_parser_main_model().parse_args()
    model = watermark_model(language=opts.language, mode=opts.mode, tau_word=opts.tau_word, lamda=opts.lamda)
   # model2 = remove_watermark(language=opts.language, mode=opts.mode, tau_word=opts.tau_word, lamda=opts.lamda)
    import glob
    import os
    import pickle
    
    for files in glob.glob('../Dataset/Attacked/NewData/*/*/*'):
        print(files)
        if('semantics' in files.lower()):
            print(files)
            with open(files, 'rb') as f:
                data = pickle.load(f)
            scores = detect_watermark(data)
            
            
            if(os.path.exists("/".join(files.split('/')[:-1]).replace('NewData','NewDataScores'))):
                pass
            else:
                os.makedirs("/".join(files.split('/')[:-1]).replace('NewData','NewDataScores'))
            
            with open(files.replace('NewData','NewDataScores').replace('.pkl','_scores.pkl'), 'wb') as f:
                pickle.dump(scores, f)
    
    dir = ''
    
    # while True:
    #     print("\n" + "=" * 66)
    #     print("Watermarking Text Generated by Black-Box Language Models".center(60))
    #     print("Created by Xi Yang (yx9726@mail.ustc.edu.cn)".center(60))
    #     print("=" * 60 + "\n")

    #     print("1. Inject Watermark")
    #     print("2. Detect Watermark")
    #     print("3. Exit\n")

    #     choice = input("Enter your choice (1/2/3): ")

    #     if choice == '1':
    #         print("\n" + "-" * 60)
    #         text = input("Enter the text to embed a watermark: ")
    #         watermarked_text = watermark_embed_demo(text)
    #         watermark_removed_text = remove_watermark_embed_demo(text)
    #         confidence_text = precise_watermark_detect(text)
    #         confidence_watermark = precise_watermark_detect(watermarked_text)
    #         confidence_watermark_removed = precise_watermark_detect(watermark_removed_text)
    #         with open("output_origial.txt", "a") as f: 
    #             f.write(text +"\t," + confidence_text)
    #             f.write("\n")
    #             f.write(watermarked_text +"\t," + confidence_watermark)
    #             f.write("\n")
    #             f.write(watermark_removed_text +"\t," + confidence_watermark_removed)
    #             f.write("\n\n\n\n\n\n")
    #             f.write("\n" + "-" * 60)
    #         print(f"Watermarked Text:\n{watermarked_text}")
    #         print("-" * 60)

    #     elif choice == '2':
    #         print("\n" + "-" * 60)
    #         text = input("Enter the text to analyze: ")
    #         mode = input("Select detection mode (Fast/Precise): ")

    #         if mode.lower() == 'fast':
    #             confidence = watermark_extract(text)
    #         elif mode.lower() == 'precise':
    #             confidence = precise_watermark_detect(text)
    #         else:
    #             print("Invalid mode. Please choose 'Fast' or 'Precise'.")
    #             continue

    #         print("\n" + "-" * 60)
    #         print(f"Confidence (the likelihood of the text containing a watermark): {confidence}")
    #         print("-" * 60)

    #     elif choice == '3':
    #         print("\nExiting...")
    #         break

    #     else:
    #         print("Invalid choice. Please choose 1, 2, or 3.")
